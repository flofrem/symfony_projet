{% extends "front/base.html.twig" %}


{% block main %}

	<h2>{{product.name}}</h2>

	<a href="{{ path("product_like", {'id' : product.id }) }}" class="btn btn-link js-likes">

		{% if app.user and product.isLikeByUser(app.user) %}
			<i class="fas fa-thumbs-up"></i>
		{% else %}
			<i class="far fa-thumbs-up"></i>
		{% endif %}

		<span class="js-likes">{{ product.likes | length }}</span>
		<span class="js-label">J'aime</span>
	</a>

	<a href="{{ path('product_dislike', {'id' : product.id}) }}" class="btn btn-link js-dislikes">
		{% if app.user and product.isDislikeByUser(app.user) %}
			<i class="fas fa-thumbs-down"></i>
		{% else %}
			<i class="far fa-thumbs-down"></i>
		{% endif %}

		<span class="js-dislikes">{{ product.dislikes | length }}</span>
		<span class="js-label">Je n'aime pas</span>
	</a>
	<h3>{{product.price}}
		€</h3>

	<a href="{{ path('add_cart', {'id' : product.id}) }}">Mettre au panier</a>

	<h4>{{product.licence.name}}</h4>
	<h4>{{product.category.name}}</h4>

	{% for media in product.media %}

		<img src="{{ media.src }}" alt="{{ media.alt }}">

	{% endfor %}

	<hr>

	<h3>Commentaires</h3>

	{% for comment in product.comments %}
		<h4>Par
			{{ comment.user.name }}
			{{ comment.user.firstname }}</h4>
		<h5>
			Le
			{{ comment.date | date('d-m-Y') }}</h5>
		<p>{{ comment.content }}</p>

		{% if app.user is same as(comment.user) %}

			<a href="{{path('update_comment', {'id' : comment.id})}}">Modifier le commentaire</a>
			<a href="{{path('delete_comment', {'id' : comment.id})}}">Supprimer le commentaire</a>

		{% endif %}

		<hr>
	{% endfor %}

	{% if app.user %}
		{{form(commentForm)}}
			{% else %}
				<h2>Vous devez vous connecter pour commenter</h2>
		{% endif %}
	{% endblock %}

	{% block js %}

		<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

		<script>
			function onClickLike(event) {
event.preventDefault();
const url = this.href;
const spanCount = this.querySelector('span.js-likes');
const icone = this.querySelector('i');
axios.get(url).then(function (response) {
spanCount.textContent = response.data.likes;
if (icone.classList.contains('fas')) {
icone.classList.replace('fas', 'far')
} else {
icone.classList.replace('far', 'fas')
}
if (response.data.message == "like ajouté et dislike supprimé") {
const spanCount3 = document.querySelector('span.js-dislikes');
const icone3 = document.querySelector('i.fa-thumbs-down');
spanCount3.textContent = response.data.dislikes;
if (icone3.classList.contains('fas')) {
icone3.classList.replace('fas', 'far')
} else {
icone3.classList.replace('far', 'fas')
}
}
}).catch(function (error) {
if (error.response.status === 403) {
window.alert("Connexion requise");
} else {
window.alert("Une erreur s'est produite")
}
})
}
function onClickDislike(event) {
event.preventDefault();
const url1 = this.href;
const spanCount1 = this.querySelector('span.js-dislikes');
const icone1 = this.querySelector('i');
axios.get(url1).then(function (response) {
spanCount1.textContent = response.data.dislikes;
if (icone1.classList.contains('fas')) {
icone1.classList.replace('fas', 'far');
} else {
icone1.classList.replace('far', 'fas');
}
if (response.data.message == "like supprimé et dislike ajouté") {
const spanCount2 = document.querySelector('span.js-likes');
const icone2 = document.querySelector('i.fa-thumbs-up');
spanCount2.textContent = response.data.likes;
if (icone2.classList.contains('fas')) {
icone2.classList.replace('fas', 'far');
} else {
icone2.classList.replace('far', 'fas');
}
}
})
}
document.querySelector('a.js-likes').addEventListener('click', onClickLike);
document.querySelector('a.js-dislikes').addEventListener('click', onClickDislike);
		</script>

	{% endblock %}